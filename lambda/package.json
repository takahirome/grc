{
  "name": "aws-serverless-express-grc",
  "version": "1.1.0",
  "description": "Example application for running a Node Express app on AWS Lambda using Amazon API Gateway.",
  "main": "lambda.js",
  "config": {
    "s3BucketName": "grc-s3",
    "cloudFormationStackName": "AwsServerlessExpressStack",
    "region": "ap-northeast-1"
  },
  "scripts": {
    "config": "node configure.js",
    "local": "node -e \"require('./lambda.js').handler(require('./api-gateway-event.json'), {succeed: v => { console.log(v); process.exit(0); }}, (e, v) => { console.log(v); process.exit(1); })\"",
    "invoke-lambda": "aws lambda invoke --function-name aws-serverless-express-grc --region $npm_package_config_region --payload file://api-gateway-event.json lambda-invoke-response.json && cat lambda-invoke-response.json",
    "create-bucket": "aws s3 mb s3://$npm_package_config_s3BucketName --region $npm_package_config_region",
    "delete-bucket": "aws s3 rm s3://$npm_package_config_s3BucketName/lambda-function.zip --region $npm_package_config_region; aws s3 rm s3://$npm_package_config_s3BucketName/simple-proxy-api.yaml --region $npm_package_config_region; aws s3 rb s3://$npm_package_config_s3BucketName --region $npm_package_config_region",
    "upload-api-gateway-swagger": "aws s3 cp ./simple-proxy-api.yaml s3://$npm_package_config_s3BucketName --region $npm_package_config_region",
    "create-stack": "aws cloudformation create-stack --stack-name $npm_package_config_cloudFormationStackName --template-body file://./cloudformation.json --capabilities CAPABILITY_IAM --parameters ParameterKey=AwsServerlessExpressS3Bucket,ParameterValue=$npm_package_config_s3BucketName --region $npm_package_config_region",
    "update-stack": "aws cloudformation update-stack --stack-name $npm_package_config_cloudFormationStackName --template-body file://./cloudformation.json --capabilities CAPABILITY_IAM --parameters ParameterKey=AwsServerlessExpressS3Bucket,ParameterValue=$npm_package_config_s3BucketName --region $npm_package_config_region",
    "delete-stack": "aws cloudformation delete-stack --stack-name $npm_package_config_cloudFormationStackName --region $npm_package_config_region",
    "package-function": "zip -q -r lambda-function.zip lambda.js app.js index.html node_modules",
    "upload-function": "aws s3 cp ./lambda-function.zip s3://$npm_package_config_s3BucketName --region $npm_package_config_region",
    "update-function": "aws lambda update-function-code --function-name aws-serverless-express-grc --region $npm_package_config_region --zip-file fileb://lambda-function.zip",
    "package-upload-function": "npm run package-function && npm run upload-function",
    "upload-update-function": "npm run upload-function && npm run update-function",
    "package-upload-update-function": "npm run package-upload-function && npm run update-function",
    "setup": "npm install && (aws s3api get-bucket-location --bucket $npm_package_config_s3BucketName --region $npm_package_config_region || npm run create-bucket) && npm run package-upload-function && npm run upload-api-gateway-swagger && npm run create-stack",
    "win-config": "node configure.js",
    "win-local": "node -e \"require('./lambda.js').handler(require('./api-gateway-event.json'), {succeed: v => { console.log(v); process.exit(0); }}, (e, v) => { console.log(v); process.exit(1); })\"",
    "win-invoke-lambda": "aws lambda invoke --function-name aws-serverless-express-grc --region %npm_package_config_region% --payload file://api-gateway-event.json lambda-invoke-response.json && cat lambda-invoke-response.json",
    "win-create-bucket": "aws s3 mb s3://%npm_package_config_s3BucketName% --region %npm_package_config_region%",
    "win-delete-bucket": "aws s3 rm s3://%npm_package_config_s3BucketName%/lambda-function.zip --region %npm_package_config_region%; aws s3 rm s3://%npm_package_config_s3BucketName%/simple-proxy-api.yaml --region %npm_package_config_region%; aws s3 rb s3://%npm_package_config_s3BucketName% --region %npm_package_config_region%",
    "win-upload-api-gateway-swagger": "aws s3 cp ./simple-proxy-api.yaml s3://%npm_package_config_s3BucketName% --region %npm_package_config_region%",
    "win-create-stack": "aws cloudformation create-stack --stack-name %npm_package_config_cloudFormationStackName% --template-body file://./cloudformation.json --capabilities CAPABILITY_IAM --parameters ParameterKey=AwsServerlessExpressS3Bucket,ParameterValue=%npm_package_config_s3BucketName% --region %npm_package_config_region%",
    "win-update-stack": "aws cloudformation update-stack --stack-name %npm_package_config_cloudFormationStackName% --template-body file://./cloudformation.json --capabilities CAPABILITY_IAM --parameters ParameterKey=AwsServerlessExpressS3Bucket,ParameterValue=%npm_package_config_s3BucketName% --region %npm_package_config_region%",
    "win-delete-stack": "aws cloudformation delete-stack --stack-name %npm_package_config_cloudFormationStackName% --region %npm_package_config_region%",
    "win-package-function": "7z a lambda-function.zip -r lambda.js app.js index.html node_modules",
    "win-upload-function": "aws s3 cp ./lambda-function.zip s3://%npm_package_config_s3BucketName% --region %npm_package_config_region%",
    "win-update-function": "aws lambda update-function-code --function-name aws-serverless-express-grc --region %npm_package_config_region% --zip-file fileb://lambda-function.zip",
    "win-package-upload-function": "npm run win-package-function && npm run win-upload-function",
    "win-upload-update-function": "npm run win-upload-function && npm run win-update-function",
    "win-package-upload-update-function": "npm run win-package-upload-function && npm run win-update-function",
    "win-setup": "npm install && (aws s3api get-bucket-location --bucket %npm_package_config_s3BucketName% --region %npm_package_config_region% || npm run win-create-bucket) && npm run win-package-upload-function && npm run win-upload-api-gateway-swagger && npm run win-create-stack"
  },
  "license": "Apache-2.0",
  "dependencies": {
    "aws-sdk": "^2.32.0",
    "aws-serverless-express": "^1.1.0",
    "body-parser": "^1.15.2",
    "cheerio-httpcli": "^0.6.11",
    "cors": "^2.8.1",
    "date-utils": "^1.2.21",
    "express": "^4.14.0",
    "iconv-lite": "^0.4.17",
    "jschardet": "^1.4.2",
    "utf8": "^2.1.2"
  }
}
